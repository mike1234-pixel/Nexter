.gallery {
  background-color: $color-grey-dark-1;
  grid-column: full-start / full-end;
  // section will span the full width, which is the entire viewport width excluding the sidebar

  // when creating a grid for a layout like this,
  // to select the number of columns and the number of row tracks,
  // you need to consider the smallest unit that you want to have in your grid. one row will be equivalent to the height of that unit, and one column equivalent to the width of the unit
  // in this case we will use an 8x7 grid, with the smallest unit being 1/7th the height and 1/8th the width of the grid
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  // rows have height of 5vw
  grid-template-rows: repeat(7, 5vw);
  grid-gap: 1.5rem; // gutter
  padding: 1.5rem; // space around the grid-container as grid-gap doesn't do anything to the outer edges

  // position of items on the grid:
  &__item {
    &--1 {
      grid-row: 1 / span 2;
      grid-column: 1 / span 2;
    }
    &--2 {
      grid-row: 1 / span 3;
      grid-column: 3 / span 3;
    }
    &--3 {
      grid-row: 1 / span 2;
      grid-column: 6 / span 1;
    }
    &--4 {
      grid-row: 1 / span 2;
      grid-column: 7 / span 2;
    }
    &--5 {
      grid-row: 3 / span 3;
      grid-column: 1 / span 2;
    }
    &--6 {
      grid-row: 4 / span 2;
      grid-column: 3 / span 2;
    }
    &--7 {
      grid-row: 4 / span 1;
      grid-column: 5 / span 1;
    }
    &--8 {
      grid-row: 3 / span 2;
      grid-column: 6 / span 2;
    }
    &--9 {
      grid-row: 3 / span 3;
      grid-column: 8 / span 1;
    }
    &--10 {
      grid-row: 6 / span 2;
      grid-column: 1 / span 1;
    }
    &--11 {
      grid-row: 6 / span 2;
      grid-column: 2 / span 2;
    }
    &--12 {
      grid-row: 6 / span 2;
      grid-column: 4 / span 1;
    }
    &--13 {
      grid-row: 5 / span 3;
      grid-column: 5 / span 3;
    }
    &--14 {
      grid-row: 6 / span 2;
      grid-column: 8 / span 1;
    }
  }

  &__img {
    width: 100%;
    height: 100%;
    object-fit: cover; // need to set a width and a height for object-fit to work
    display: block;
  }

  & > * {
    width: 100%;
  }
}
// setting object-fit to cover is like setting background-size to cover. The img fits perfectly in its container/cell without overflowing.
// we first create a parent (<figure>) element for each image, then add object-fit to that parent element
// The figure element will now be the grid-item
